@inject ILocalizer _localizer
@model ChangePasswordViewModel
@{
	Layout = null;
	
	var pageGuid = "el" + Guid.NewGuid().ToString();

	String? Localize(String key) => _localizer.Localize(key);
}
<div class=modal id="@pageGuid" v-modal-width="{cssClass:'modal-small'}">
	<div class=modal-header v-drag-window>
		<span>@Localize("@[SetNewPassword]")</span>
		<button class=btnclose v-on:click.prevent="modalClose(false)">&#x2715;</button>
	</div>
	<div class="modal-content overflow">
		<div class=grid style="grid-template-columns:1fr;margin-bottom:1rem">
			<static label="@Localize("@[User]")" :text="User.Name" style="grid-row:1"></static>
			<textbox label="@Localize("@[OldPassword]")" :password=true :tab-index=1 :item=User prop="OldPassword" style="grid-row:2"></textbox>
			<textbox label="@Localize("@[NewPassword]")" :password=true :tab-index=2 :item=User prop="NewPassword" style="grid-row:3"></textbox>
			<textbox label="@Localize("@[Confirm]")" :password=true :tab-index=3 :item=User prop="ConfirmPassword" style="grid-row:4"></textbox>
		</div>
	</div>
	<div class=modal-footer>
		<div class=aligner></div>
		<button class="btn btn-primary a2-inline" v-on:click.prevent=doChangePassword v-settabindex
				v-bind:disabled=isInvalid>@Localize("@[SetPassword]")</button>
		<button class="btn a2-inline" v-on:click.prevent="modalClose(false)" v-settabindex>@Localize("@[Cancel]")</button>
	</div>
</div>
<script type="text/javascript">
(function () {

	'use strict';

	const eventBus = require('std:eventBus');
	const cmn = require('std:datamodel');
	const DataModelController = component('baseController');

	function modelData(template, data) {
		function TRoot(source, path, parent) {
			cmn.createObject(this, source, path, parent);
		}

		function TUser(source, path, parent) {
			cmn.createObject(this, source, path, parent);
		}

		cmn.defineObject(TRoot, {props: {'User':TUser}}, false);
		cmn.defineObject(TUser, {props: {'Name':{type:String, len:255},'OldPassword':{type:String, len:255},'NewPassword':{type:String, len:255},'ConfirmPassword':{type:String, len:255}},
			$name: 'Name'}, false);

		cmn.implementRoot(TRoot, template, { TRoot, TUser });

		let root = new TRoot(data);
		cmn.setModelInfo(root, {}, rawData);
		return root;
	}

	let rawData = {
		User: {
			Name: '@Model.UserName',
		}
	};

	// commands in vm
	const template = {
		validators: {
			'User.OldPassword': '@Html.Raw(Localize("@[EnterPassword]"))',
			'User.NewPassword': {
				valid(user) {
					if (!user.NewPassword)
							return '@Html.Raw(Localize("@[EnterPassword]"))';
					else if (user.NewPassword.length < 6)
						return '@Html.Raw(Localize("@[PasswordLength]"))';
					return true;
				}
			},
			'User.ConfirmPassword': {
				valid(user) {
					if (user.NewPassword !== user.ConfirmPassword)
						return '@Html.Raw(Localize("@[MatchError]"))';
					return true;
				}
			}
		}
	};

    const vm = new DataModelController({
        el: "#@pageGuid",
		data: modelData(template, rawData),
		computed: {
            isInvalid() {
                return this.User.$invalid;
			}
		},
		methods: {
            async doChangePassword() {
				let user = this.User;
				const vm = this;
				if (user.$invalid) return;

				let formData = new URLSearchParams();
				formData.append('OldPassword', user.OldPassword);
				formData.append('NewPassword', user.NewPassword);
				let resp = await fetch('/account/changepassword', {
					method: 'POST',
					body: formData
				});
				if (resp.ok) {
					let result = await resp.json();
					if (result.success)
						this.modalClose(true);
					else {
						if (result.message === 'PasswordMismatch')
							this.$alert('@Html.Raw(Localize("@[InvalidOldPassword]"))');
						else if (result.message === 'ChangePasswordNotAllowed')
							this.$alert('@Html.Raw(Localize("@[ChangePasswordDisabled]"))');
						else
							this.$alert(result.message);
					}
				}
			},
			modalClose(result) {
				eventBus.$emit('modalClose', result);
			}

		}
	});

	vm.$data._host_ = {
		$viewModel: vm
	};

	vm.__doInit__();
})();
</script>
