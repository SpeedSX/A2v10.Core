@inject ILocalizer _loc
@model SimpleIdentityViewModel

"use strict";
(function() {

const validEmail = window.__validEmail;
const CONFIRM_RESET = '@Html.Raw(_loc["ConfirmReset"])';

new Vue({
el:"#app",
data: {
	email:'',
	password:'',
	confirm:'',
	submitted: false,
	mode: '',
	code: '',
	serverError: '',
	confirmText: '',
},
computed: {
	emailVisible() { return this.mode === ''; },
	codeVisible() { return this.mode === 'code'; },
	passwordVisible() { return this.mode === 'password';},
	invalidEmail() {
		if (!this.submitted) return false;
		return !!this.emailError;
	},
	invalidPassword() {
		if (!this.submitted) return false;
		return !!this.passwordError;
	},
	invalidConfirm() {
		if (!this.submitted) return false;
		return !!this.submitError;
	},
	invalidCode() {
		if (!this.submitted) return false;
		return !this.code;
	},
	emailError() {
		if (!this.submitted) return '';
		if (!this.email) return '@Html.Raw(_loc["EnterEMail"])';
		if (!validEmail(this.email)) return '@Html.Raw(_loc["InvalidEMail"])';
	},
	passwordError() {
		if (!this.submitted) return '';
		if (!this.password) return '@Html.Raw(_loc["EnterPassword"])';
		if (this.password != this.confirm)
			return '@Html.Raw(_loc["MatchError"])'
	},
	submitError() {
		if (!this.submitted) return '';
		if (this.password != this.confirm)
			return '@Html.Raw(_loc["MatchError"])'
	},
	valid() {
		return !this.invalidEmail && !this.invalidPassword;
	}
},
methods: {
	fail(msg) {
		if (msg == 'Failed')
			this.serverError = '@Html.Raw(_loc["ErrorText"])';
		else if (msg === 'InvalidCode')
			this.serverError = '@Html.Raw(_loc["InvalidConfirmCode"])';
		else
			this.serverError = msg;
	},
	async sendMail() {
		this.submitted = true;
		if (this.emailError) return;
		let formData = new URLSearchParams();
		formData.append('Login', this.email);
		formData.append('__RequestVerificationToken', '@Model?.RequestToken');
		let resp = await fetch('/account/forgotpassword', {
			method: 'POST',
			body: formData
		});
		if (resp.ok) {
			let result = await resp.json();
			if (result.success) {
				this.confirmText = CONFIRM_RESET.replace('{0}', this.email);
				this.mode = 'code';
				this.submitted = false;
				this.serverError = '';
				setTimeout(() => {
					let x = document.getElementById('confirm-code');
					if (x) x.focus();
				}, 1);
			}
			else 
				this.fail(result.message);
		}
		else
			this.fail(await resp.text());
	},
	async submitCode() {
		this.submitted = true;
		if (this.invalidCode) return;
		let formData = new URLSearchParams();
		formData.append('Login', this.email);
		formData.append('__RequestVerificationToken', '@Model?.RequestToken');
		formData.append('Code', this.code);
		let resp = await fetch('/account/checkforgotpasswordCode', {
			method: 'POST',
			body: formData
		});
		if (resp.ok) {
			let result = await resp.json();
			if (result.success) {
				this.mode = 'password';
				this.submitted = false;
				this.serverError = '';
				setTimeout(() => {
					let x = document.getElementById('password');
					if (x) x.focus();
				}, 1);
			} else
				this.fail(result.message);

		} 
		else
			this.fail(await resp.text());
	},
	async submitReset() {
		this.submitted = true;
		if (!this.valid) return;
		let formData = new URLSearchParams();
		formData.append('Login', this.email);
		formData.append('Code', this.code);
		formData.append('Password', this.password);
		formData.append('__RequestVerificationToken', '@Model?.RequestToken');
		let resp = await fetch('/account/resetpassword', {
			method: 'POST',
			body: formData
		});
		if (resp.redirected)
			window.location.assign(resp.url);
		else if (resp.ok) {
			let result = await resp.json();
			if (result.success)
				this.success(result.message);
			else
				this.fail(result.message);
		}
		else
			alert(await resp.text());
	}
}
});
})();