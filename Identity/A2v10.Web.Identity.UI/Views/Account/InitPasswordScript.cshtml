@inject ILocalizer _loc
@model InitPasswordViewModel

"use strict";
(function() {


const pwdLength = 6;

new Vue({
el:"#app",
data: {
	email:'@Model?.Login',
	token: '@Model?.Token',
	password:'',
	confirm:'',
	submitted: false,
	serverError: '',
	processing: false
},
computed: {
	passwordError() {
		if (!this.submitted) return '';
		if (!this.password) return '@Html.Raw(_loc["EnterPassword"])';
		if (this.password.length < pwdLength)
			return '@Html.Raw(_loc["PasswordLength"])'
		return '';
	},
	invalidPassword() {
		if (!this.submitted) return false;
		return !!this.passwordError;
	},
	invalidConfirm() {
		if (!this.submitted) return false;
		return !this.confirm || (this.password !== this.confirm);
	},
	valid() {
		if (!this.submitted) return;
		return !this.invalidPassword && !this.invalidConfirm;
	}
},
methods: {
	success(result) {
		switch (result.message) {
			case 'Redirect':
				window.location.replace(result.url);
				break;
			default:
				alert(`${result.message} yet not implemented`);
				break;
		}
	},
	fail(code) {
		switch (code) {
			case 'AntiForgery':
				this.serverError = '@Html.Raw(_loc["AntiForgery"])';
				break;
			default:
				this.serverError = code;
				break;
		}
	},
	async submit() {
		if (this.processing) return;
		this.submitted = true;
		this.serverError = '';
		this.email = this.email.trim();
		if (!this.valid)
			return;
		let formData = new URLSearchParams();
		formData.append('Login', this.email);
		formData.append('Token', this.token);
		formData.append('Password', this.password);
		formData.append('__RequestVerificationToken', '@Model?.RequestToken');
		let resp = await fetch('/account/initpassword', {
			method: 'POST',
			redirect: 'error',
			body: formData
		});
		if (resp.ok) {
			let result = await resp.json();
			if (result.success) {
				this.success(result);
			} else
				this.fail(result.message);
		}
		else
			alert(await resp.text());
	}
},
mounted() {
}
});
})();