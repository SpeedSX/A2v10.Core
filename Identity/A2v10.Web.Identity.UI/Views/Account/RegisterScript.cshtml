@inject ILocalizer _loc
@model RegisterViewModel

"use strict";
(function() {

const maskTools = maskTool();
const validEmail = window.__validEmail;

const currentMask = '+38 (0##) ###-##-##';
const pwdLength = 6;

new Vue({
el:"#app",
data: {
	email:'@Model?.Login',
	name:'',
	password:'',
	phone: '',
	confirm:'',
	submitted: false,
	serverError: '',
	processing: false
},
computed: {
	maskedPhone() {
		return this.phone ?
			maskTools.getMasked(currentMask, this.phone) : this.phone;
	},
	invalidEmail() {
		if (!this.submitted) return false;
		return !!this.emailError;
	},
	emailError() {
		if (!this.submitted) return '';
		if (!this.email) return '@Html.Raw(_loc["EnterEMail"])';
		if (!validEmail(this.email)) return '@Html.Raw(_loc["InvalidEMail"])';
		return '';
	},
	passwordError() {
		if (!this.submitted) return '';
		if (!this.password) return '@Html.Raw(_loc["EnterPassword"])';
		if (this.password.length < pwdLength)
			return '@Html.Raw(_loc["PasswordLength"])'
		return '';
	},
	invalidName() {
		if (!this.submitted) return false;
		return !this.name;
	},
	invalidPassword() {
		if (!this.submitted) return false;
		return !!this.passwordError;
	},
	invalidConfirm() {
		if (!this.submitted) return false;
		return !this.confirm || (this.password !== this.confirm);
	},
	valid() {
		if (!this.submitted) return;
		return !this.invalidEmail && !this.invalidPassword && !this.invalidName && !this.invalidConfirm;
	}
},
methods: {
	onPhoneChange: function(value) {
		this.phone = maskTools.getUnmasked(currentMask, value);
		if (this.$refs.phoneInput.value !== this.maskedPhone) {
			this.$refs.phoneInput.value = this.maskedPhone;
			this.$emit('change', this.phone);
		}
	},
	success(code) {
		alert(code + ": Yet not implemented");
	},
	fail(code) {
		switch (code) {
			case 'AntiForgery':
				this.serverError = '@Html.Raw(_loc["AntiForgery"])';
				break;
			case 'DuplicateUserName':
				this.serverError = '@Html.Raw(_loc["AlreadyTaken"])'.replace('{0}', this.email);
				break;
			default:
				this.serverError = code;
				break;
		}
	},
	async submit() {
		if (this.processing) return;
		this.submitted = true;
		this.serverError = '';
		this.email = this.email.trim();
		if (!this.valid)
			return;
		let formData = new URLSearchParams();
		formData.append('Login', this.email);
		formData.append('PersonName', this.name);
		formData.append('Phone', this.phone);
		formData.append('Email', this.email);
		formData.append('Password', this.password);
		formData.append('__RequestVerificationToken', '@Model?.RequestToken');
		let resp = await fetch('/account/register', {
			method: 'POST',
			body: formData
		});
		if (resp.redirected)
			window.location.assign(resp.url);
		else if (resp.ok) {
			let result = await resp.json();
			if (result.success)
				this.success(result.message);
			else
				this.fail(result.message);
		}
		else
			alert(await resp.text());
	}
},
mounted() {
	maskTools.mountElement(this.$refs.phoneInput, currentMask);
	document.addEventListener('keypress', this.__keyUp);
}
});
})();